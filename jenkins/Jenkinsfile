pipeline
{
	agent none
	stages
	{
		stage('repository checkout')
		{
			agent any
			steps
			{
				checkout scm
			}
		}
		stage('build tarball')
		{
			agent any
			steps
			{
				sh 'scripts/tarball.bash'
				archiveArtifacts artifacts: 'dist/dcm-0.1.tar.gz'
				stash name: 'tarball', includes: 'dist/dcm-0.1.tar.gz'
				stash name: 'spec', includes: 'rpm/*'
			}
		}
		
		stage('build rpm')
		{
			agent
			{
				dockerfile
				{
					filename 'c6build.dockerfile'
					dir 'rpm/dep'
					additionalBuildArgs '-t c6build'
				}
			}
			steps
			{
				unstash 'tarball'
				unstash 'spec'
				sh 'rpmdev-setuptree ; cp rpm/dep/rpmmacros ~/.rpmmacros'
				sh 'cp dist/dcm-0.1.tar.gz ~/rpmbuild/SOURCES/'
				sh 'rpmbuild -ba rpm/dcm.spec'
				sh 'cp ~/rpmbuild/RPMS/noarch/dcm-0.1-0.noarch.rpm dist'
				archiveArtifacts artifacts: 'dist/dcm-0.1-0.noarch.rpm'
				stash name: 'rpm', includes: 'dist/dcm-0.1-0.noarch.rpm'
			}
		}
		stage('test rpm')
		{
			agent any
			steps
			{
				unstash 'rpm'
				echo 'setting up dcm client (depositor) and server test environment'
				sh 'docker-compose -f docker/compose0.yml --project-directory . build'
				sh 'docker-compose -f docker/compose0.yml --project-directory . up -d'
				sh 'sleep 5' /* rather than a wait-for-healthy loop */

				echo 'testing successful validation'
				sh 'docker exec -t dcm_client scripts/test_client.sh dset1 user /home/depositor/dataset'
				sh 'docker exec dcm_server ls /deposit/dset1/dset1/files.sha'
				sh 'docker exec dcm_server /opt/dcm/scn/post_upload.bash'
				sh 'docker exec dcm_server ls /hold/dset1/dset1/files.sha'
				
				
				echo 'testing failed validation'
				sh 'docker exec -t dcm_client scripts/test_client.sh dset2 user /home/depositor/dataset'
				sh 'docker exec dcm_server ls /deposit/dset2/dset2/files.sha'
				sh 'docker exec dcm_server rm /deposit/dset2/dset2/d0.dat'
				sh 'docker exec dcm_server /opt/dcm/scn/post_upload.bash'
				sh 'docker exec dcm_server ls /deposit/dset2/dset2/d2.dat' /*files.sha gets renamed so the user can retry */
				
			}
			post
			{
				always
				{
					sh 'docker-compose -f docker/compose0.yml --project-directory . down'
					/*sh 'docker-compose -f docker/compose0.yml --project-directory . rm -f'*/
				}
			}
		}
	}
}
